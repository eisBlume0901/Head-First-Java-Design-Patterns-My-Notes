Suggested Solution 1: Separate the Object Creation out of orderPizza() method

orderPizza() method only cares that it gets pizza that implements the Pizza
interface so that it can call prepare(), bake(), cut(), and box()

orderPizza() method asks the PizzaFactory to make one

(Single Responsibility Principle for a Method)

Suggested Solution Code 1:

public class SimplePizzaFactory {
    public Pizza createPizza(String type) {
        Pizza pizza = null;

        if (type.equals("cheese"))
            pizza = new CheesePizza();
        else if (type.equals("greek")
            pizza = new GreekPizza();
        else if (type.equals("Pepperoni"))
            pizza = new PepperoniPizza();
        else if (type.equals("Clam"))
            pizza = new ClamPizza();
        else if (type.equals("Veggie"))
            pizza = new VeggiePizza();

        return pizza;
    }
}

createPizza() method is a method all clients will use to instantiate new objects

Factories handles the details of object creation.

What is the advantage?

Factory Design Pattern is not all about pushing the problem off to another
class object (in this case, separating the object creation of different pizzas
to another class).
- the createPizza() method can be used by the PizzaShop class' orderPizza() method,
the createPizza() method can be used by the PizzaShopMenu class to get their current description
and price if we will put each pizza object its own description and price,
the createPizza() method can be handled by the HomeDelivery class so that there is no
need for duplication.
- “Think of it like a pizza shop. When you order a pizza, you don’t have to know
how to make each type of pizza. The pizza shop (the ‘Factory’) knows how to make
each type of pizza and gives you the one you asked for. If the shop wants to add
a new type of pizza, they just update their recipes (the ‘Factory’), and you can
order the new pizza without any changes on your part. This makes it easier to manage
and maintain the pizza shop.”

This explanation emphasizes the benefits of the Factory Design Pattern: encapsulation
of object creation, code reusability, and ease of maintenance. It also adheres to the
Single Responsibility Principle, as each class (or in this case, pizza) has a single
responsibility and is not overly complicated.

Factory can also be defined as a static method.
Difference between static Factory and non-static Factory

Static - does not need to instantiate to access the method or variable within the class.
    However, you cannot subclass and change the behavior of the the method or variable.
Non-static - need to create an object and instantiate it to access the method

Integration of suggested solution code 1:

public class PizzaStore {
    SimplePizzaFactory factory;

    public PizzaStore(SimplePizzaFactory factory) {
        this.factory = factory;
    }

    public Pizza orderPizza(String type) {
        Pizza pizza;

        pizza = factory.createPizza(type); // No more concrete instantiations

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }
}
