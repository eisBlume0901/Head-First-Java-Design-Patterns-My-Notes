Duck duck = new MallardDuck();

Duck is an abstract class
MallardDuck is a concrete class

Duck duck;

if (picnic)
    duck = new MallardDuck();
else if (hunting)
    duck = new DecoyDuck();
else if (inBathTub)
    duck = new RubberDuck();

The code above has several concrete classes being instantiated,
and the decision of which to instantiate is made at runtime
depending on some set of conditions.

Problems with this code:
1. Violation of Open-Closed Principle of SOLID principles
If you want to add a new type of Duck, you would need to modify
the existing code. Remember: Adding new functionality should not
result in changes to the existing code, but should be possible by
adding new code.
2. Violation of Single Responsibility Principle of SOLID principles
If the logic for creating a duck changes, you would need to find
and update all instances where a duck is created; thus, leading
to errors if an instance is missed and makes the code harder to
maintain.

Another similar example with the duck logic problem:

Pizza orderPizza(String type)
    Pizza pizza;

    if (type.equals("cheese"))
        pizza = new CheesePizza();
    else if (type.equals("greek")
        pizza = new GreekPizza();
    else if (type.equals("Pepperoni"))
        pizza = new PepperoniPizza();
    else if (type.equals("Clam"))
        pizza = new ClamPizza();
    else if (type.equals("Veggie"))
        pizza = new VeggiePizza();

    pizza.prepare();
    pizza.bake();
    pizza.cut();
    pizza.box();

    return pizza;

Layman's term: Instead of putting the if-else code along with the
creation of duck, it is better to separate it to another class so
that you would only modify the switch-case/if-else code of concrete
classes

