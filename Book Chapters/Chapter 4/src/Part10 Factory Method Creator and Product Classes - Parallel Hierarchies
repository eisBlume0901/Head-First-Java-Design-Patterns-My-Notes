Factory method - encapsulates object creation by letting
subclasses decide what objects to create. Factory method
integrates design pattern principles 1 - 1. Identify the
aspects of your application that vary and separate them
from what stays the same. - Chapter 1, Part2 and 2. Program
to an interface, not an implementation - Chapter 1, Part3.

How these 2 principles are integrated?
We encapsulate the code for object creation through Simple Factory class
(Simple Factory method is not equal to Factory method); however, this posed
problems since there is also regional branches for Pizza Stores; thus,
program to interface and not an implementation comes in. By creating
abstract/interface classes we allow code flexibility and extensibility
by letting its subclasses add more features and functionalities that
are not declared from abstract/interface classes. Furthermore, we provide
one place to perform maintenance which is the abstract/interface classes
only not the subclasses that inherited them.

Creator classes
Abstract classes that declare the factory method which returns an object
of the product class. It might also define a default implementation of
the factory method, but subclasses can override this method to change the
class of product that will be created (Only subclasses actually implement
the factory method and create products). It is written without knowledge
of actual products that will be created.
Example: PizzaStore -> inherited by -> NYPizzaStore, ChicagoPizzaStore,
CaliforniaPizzaStore

Product classes
Classes of objects that the factory method creates. It defines the interface,
which is implemented by all products that the factory method creates.
Example: Pizza -> inherited by -> NYStyleCheesePizza, ChicagoStyleCheesePizza

Parallel Hierarchies
Both creator and product classes has an abstract/interface class
which its subclass can inherit from and override its abstract methods

